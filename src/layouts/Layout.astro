---
import { ViewTransitions } from 'astro:transitions';
import SideMenu from '../components/Side/SideMenu.astro';

interface Props {
  title: string;
  image?: string;
}

const {
  title,
  image = 'https://res.cloudinary.com/dp3ppkxo5/image/upload/v1693776174/spotify-astro/playlist_2_f9ymlx.jpg',
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="description" content="Spotify copy with transitions" />

    <meta name="og:title" content={title} />
    <meta name="og:type" content="song" />
    <meta name="og:image" content={image} />
    <meta name="og:description" content="sooooong" />

    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <title>Spotify with transition in Astro</title>
    <ViewTransitions fallback="none" />
  </head>
  <body class="dark">
    <div class="relative h-screen p-2 gap-2 flex items-stretch">
      <div class="w-[350px] flex-col hidden lg:flex overflow-y-auto">
        <SideMenu />
      </div>
      <div class="rounded-lg bg-zinc-900 flex-1 mx-auto overflow-y-auto">
        <slot />
      </div>
    </div>
    <style is:global>
      :root {
        --color-primary: theme(colors.green.500);
        --color-background: theme(colors.zinc.950);
        --color-foreground: theme(colors.zinc.900);
      }
      body {
        background: var(--color-background);
        color: white;
      }
    </style>
    <script is:inline defer>
      function setColorContainer(dataColor) {
        const playlistContainer = document.getElementById('playlist-container');
        const currentColor = playlistContainer?.getAttribute('data-color');

        if (dataColor && dataColor !== currentColor) {
          playlistContainer?.style.setProperty('--context-color', dataColor);
          playlistContainer?.setAttribute('data-color', dataColor);
        }
      }

      function onMouseOverColorad(el) {
        if (el) {
          const dataColor = el.getAttribute('data-color');
          if (!dataColor) return;

          window.coloradTimeout = setTimeout(
            () => setColorContainer(dataColor),
            200
          );
        }
      }

      function onMouseOutColorad() {
        if (window.coloradTimeout) {
          clearTimeout(window.coloradTimeout);
          window.coloradTimeout = null;
        }
      }

      function onMouseFocusColorad(el) {
        if (el) {
          const dataColor = el.getAttribute('data-color');
          if (!dataColor) return;
          setColorContainer(dataColor);
        }
      }

      window.coloradTimeout = null;

      for (const playlist of document.querySelectorAll('.playlist-item')) {
        playlist.addEventListener('mouseover', () => {
          console.log('CIAOOOO', playlist);
          onMouseOverColorad(playlist);
        });

        playlist.addEventListener('mouseout', onMouseOutColorad);

        playlist.addEventListener('focus', () => onMouseFocusColorad(playlist));

        playlist.addEventListener('blur', onMouseOutColorad);
      }
    </script>
  </body>
</html>
